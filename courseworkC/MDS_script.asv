%% Classical Multidimensional Scaling

%% -- Read and prepare data -- %%
%% Color Wavelength data set
%similarities = csvread('MDSdata.csv');
%D = 1-similarities;  % Input dissimilarity matrix
%n = length(D);

% Make sure that the diagonals are still 0
for i = 1:n
   D(i,i) = 0;
end

%% WoodyPlants data set

D = figs.data;

%% Compute Gram matrix using double centering

I = eye(n);
e = ones(n,n);

G = -0.5 * (I - (1/n)*e) * (D .* D) * (I - (1/n)*e);

%% Compute eigenvalues and eigenvectors of G
% We use a function called sortem to ensure proper sorting of eigenvalues
% and eigenvectors

[U_unsorted,E_unsorted] = eig(G);
[U,E] = sortem(U_unsorted,E_unsorted);

%% Compute resulting points

d = 4;          % Desired dimension of the solution
X = zeros(d,n); % Matrix that will store the d-dimensional coordinates

% Use the eigenvalues and eigenvectors to find the coordinates
for i = 1:n
   for j = 1:d
      X(j,i) = sqrt(E(j,j))*U(i,j);
   end
end

%% Matlab function for comparison purposes
[Y,k] = cmdscale(D,d);
Y = Y';

%% Compute stress
stressSum = 0;

% Compute Sum( (d_ij - ||x_i-x_j||)^2 )
for i = 1:n
    for j = 1:i-1
        stressSum = stressSum + (D(i,j)-norm(X(:,i)-X(:,j)))^2;
    end
end

% Compute Sum( (d_ij)^2 )
total = 0;
for i = 1:n
    for j = 1:i-1
        total = total + (D(i,j))^2;
    end
end

% Compute sqrt of ratio
stress = sqrt(stressSum / total);

%% 
if (d==2)
    clf;
    scatter(X(1,:),X(2,:),'k','linewidth',4);
    figure(2);
    scatter(Y(1,:),Y(2,:),'k','linewidth',4);
end
if (d==3)
    clf;
    scatter3(X(1,:),X(2,:),X(3,:));
    figure(2);
    scatter3(Y(1,:),Y(2,:),Y(3,:));
end
